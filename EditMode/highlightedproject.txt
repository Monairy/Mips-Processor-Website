<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<!--
generated by Pygments <http://pygments.org>
Copyright 2006-2019 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->
<html>
<head>
  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=None">
  <style type="text/css">
/*
generated by Pygments <http://pygments.org>
Copyright 2006-2019 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
td.linenos { background-color: #f0f0f0; padding-right: 10px; }
span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }
pre { line-height: 125%; }
body .hll { background-color: #ffffcc }
body  { background: #f8f8f8; }
body .c { color: #408080; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #008000; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
body .cm { color: #408080; font-style: italic } /* Comment.Multiline */
body .cp { color: #BC7A00 } /* Comment.Preproc */
body .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
body .c1 { color: #408080; font-style: italic } /* Comment.Single */
body .cs { color: #408080; font-style: italic } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
body .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #008000 } /* Keyword.Pseudo */
body .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #B00040 } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BA2121 } /* Literal.String */
body .na { color: #7D9029 } /* Name.Attribute */
body .nb { color: #008000 } /* Name.Builtin */
body .nc { color: #0000FF; font-weight: bold } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #0000FF } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #19177C } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mb { color: #666666 } /* Literal.Number.Bin */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sa { color: #BA2121 } /* Literal.String.Affix */
body .sb { color: #BA2121 } /* Literal.String.Backtick */
body .sc { color: #BA2121 } /* Literal.String.Char */
body .dl { color: #BA2121 } /* Literal.String.Delimiter */
body .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BA2121 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BA2121 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BA2121 } /* Literal.String.Single */
body .ss { color: #19177C } /* Literal.String.Symbol */
body .bp { color: #008000 } /* Name.Builtin.Pseudo */
body .fm { color: #0000FF } /* Name.Function.Magic */
body .vc { color: #19177C } /* Name.Variable.Class */
body .vg { color: #19177C } /* Name.Variable.Global */
body .vi { color: #19177C } /* Name.Variable.Instance */
body .vm { color: #19177C } /* Name.Variable.Magic */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </style>
</head>
<body>
<h2></h2>

<div class="highlight"><pre><span></span><span class="k">module</span> <span class="no">PC</span><span class="p">(</span><span class="n">Out</span><span class="p">,</span><span class="n">In</span><span class="p">,</span><span class="n">clk</span><span class="p">,</span><span class="n">endexecution</span><span class="p">);</span>
<span class="k">input</span> <span class="n">clk</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Out</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="n">endexecution</span><span class="p">;</span> <span class="c1">///////////////</span>
<span class="k">initial</span>
<span class="k">begin</span>
<span class="n">Out</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span>
<span class="k">end</span>

<span class="c1">/////////////////// know number of instuctions</span>
<span class="k">integer</span> <span class="n">Ay7aga</span><span class="p">;</span>
<span class="k">integer</span> <span class="n">lines</span><span class="o">=-</span><span class="mh">1</span><span class="p">;</span>
<span class="k">integer</span> <span class="n">file1</span><span class="p">;</span>
<span class="k">integer</span> <span class="n">cycles</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span>
<span class="k">initial</span>
<span class="k">begin</span>
<span class="n">file1</span><span class="o">=</span><span class="nb">$fopen</span><span class="p">(</span><span class="s">&quot;C:/localhost/_ToInstMem.txt&quot;</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span><span class="o">!</span> <span class="n">$feof</span><span class="p">(</span><span class="n">file1</span><span class="p">))</span>
<span class="k">begin</span>
<span class="n">$fscanf</span><span class="p">(</span><span class="n">file1</span><span class="p">,</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">Ay7aga</span><span class="p">);</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">lines</span><span class="o">+</span><span class="mh">1</span><span class="p">;</span> <span class="c1">//////// number of lines in code</span>
<span class="k">end</span>
<span class="nb">$fclose</span><span class="p">(</span><span class="n">file1</span><span class="p">);</span>
<span class="k">end</span>

<span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">clk</span><span class="p">)</span>
<span class="k">begin</span>
<span class="n">Out</span> <span class="o">&lt;=</span> <span class="n">In</span><span class="p">;</span>
<span class="c1">////cycles=cycles+1; ///////////// </span>
<span class="k">if</span> <span class="p">((</span><span class="n">In</span><span class="o">&gt;&gt;</span><span class="mh">2</span><span class="p">)</span><span class="o">&gt;</span><span class="n">lines</span><span class="o">+</span><span class="mh">1</span><span class="p">)</span>
<span class="n">endexecution</span><span class="o">=</span><span class="mh">1</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">endmodule</span>

<span class="k">module</span> <span class="n">DataMemory</span><span class="p">(</span><span class="n">ReadData</span><span class="p">,</span><span class="n">Address</span><span class="p">,</span><span class="n">WriteData</span><span class="p">,</span><span class="n">MemRead</span><span class="p">,</span><span class="n">MemWrite</span><span class="p">,</span><span class="n">clk</span><span class="p">,</span><span class="n">endofexec</span><span class="p">);</span>

<span class="k">input</span> <span class="n">clk</span><span class="p">;</span>
<span class="k">input</span> <span class="n">MemRead</span><span class="p">;</span>
<span class="k">input</span> <span class="n">MemWrite</span><span class="p">;</span>
<span class="k">input</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Address</span><span class="p">;</span>
<span class="k">input</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">WriteData</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">ReadData</span><span class="p">;</span>
<span class="k">input</span> <span class="n">endofexec</span><span class="p">;</span> <span class="c1">///////////////////////////////////flaggggggg</span>
<span class="kt">reg</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">datamem</span><span class="p">[</span><span class="mh">0</span><span class="o">:</span><span class="mh">8191</span><span class="p">];</span>
<span class="k">integer</span> <span class="n">file</span><span class="p">;</span>
<span class="k">integer</span> <span class="n">i</span><span class="p">;</span>

<span class="k">always</span> <span class="p">@(</span><span class="n">ReadData</span><span class="p">,</span><span class="n">Address</span><span class="p">,</span><span class="n">MemRead</span><span class="p">,</span><span class="n">WriteData</span><span class="p">,</span><span class="n">MemWrite</span><span class="p">)</span>
<span class="k">begin</span>
 <span class="n">ReadData</span> <span class="o">&lt;=</span> <span class="n">datamem</span><span class="p">[</span><span class="n">Address</span><span class="o">&gt;&gt;</span><span class="mh">2</span><span class="p">];</span>
<span class="k">end</span>

<span class="k">always</span> <span class="p">@(</span><span class="k">posedge</span> <span class="n">clk</span><span class="p">)</span>
<span class="k">begin</span>
<span class="k">if</span><span class="p">(</span><span class="n">MemWrite</span><span class="p">)</span>
<span class="k">begin</span>
<span class="n">datamem</span><span class="p">[</span><span class="n">Address</span><span class="o">&gt;&gt;</span><span class="mh">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">WriteData</span><span class="p">;</span>
<span class="k">end</span>
<span class="k">end</span>

<span class="k">always</span> <span class="p">@(</span><span class="k">posedge</span> <span class="n">endofexec</span><span class="p">)</span> <span class="c1">/////////////to monitor DataMemory contents in a file///////////////////</span>
<span class="k">begin</span>
<span class="n">file</span><span class="o">=</span><span class="nb">$fopen</span><span class="p">(</span><span class="s">&quot;C:/localhost/_FromDataMem.txt&quot;</span><span class="p">);</span>
<span class="nb">$fmonitor</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="s">&quot;%b  //%d&quot;</span><span class="p">,</span><span class="n">datamem</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">i</span><span class="o">*</span><span class="mh">4</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mh">8191</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mh">1</span><span class="p">)</span>
<span class="k">begin</span>
<span class="p">#</span><span class="mh">1</span>
<span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
<span class="k">end</span>
<span class="k">end</span>

<span class="k">endmodule</span>



<span class="k">module</span> <span class="n">InstructionMemory</span><span class="p">(</span><span class="n">Instruction</span><span class="p">,</span><span class="n">ReadAdd</span><span class="p">,</span><span class="n">clk</span><span class="p">,);</span>
<span class="k">input</span> <span class="n">clk</span><span class="p">;</span>                   <span class="c1">//the instruction is constant within the cycle</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">ReadAdd</span><span class="p">;</span>         <span class="c1">//4 hexadicimal digits from pc</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Instruction</span><span class="p">;</span>
<span class="kt">reg</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">instmem</span><span class="p">[</span><span class="mh">0</span><span class="o">:</span><span class="mh">8191</span><span class="p">];</span>
<span class="k">integer</span> <span class="n">file1</span><span class="p">,</span><span class="n">file2</span><span class="p">;</span>
<span class="k">integer</span> <span class="n">i</span><span class="p">;</span>

<span class="k">always</span> <span class="p">@(</span><span class="k">negedge</span> <span class="n">clk</span><span class="p">)</span>        <span class="c1">//at rising edge the instruction is read</span>
<span class="k">begin</span>
 <span class="n">Instruction</span> <span class="o">&lt;=</span> <span class="n">instmem</span><span class="p">[</span><span class="n">ReadAdd</span><span class="o">&gt;&gt;</span><span class="mh">2</span><span class="p">];</span>
<span class="k">end</span>

<span class="k">initial</span>                <span class="c1">//to fill the instruction memory from a file</span>
<span class="k">begin</span>
<span class="nb">$readmemb</span><span class="p">(</span><span class="s">&quot;C:/localhost/_ToInstMem.txt&quot;</span><span class="p">,</span><span class="n">instmem</span><span class="p">);</span>
<span class="k">end</span>

<span class="k">initial</span>                <span class="c1">//to monitor memory contents in a file</span>
<span class="k">begin</span>
<span class="n">i</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span>
<span class="n">file2</span><span class="o">=</span><span class="nb">$fopen</span><span class="p">(</span><span class="s">&quot;C:/localhost/_FromInstMem.txt&quot;</span><span class="p">);</span>
<span class="nb">$fmonitor</span><span class="p">(</span><span class="n">file2</span><span class="p">,</span><span class="s">&quot;%b // %h &quot;</span><span class="p">,</span><span class="n">instmem</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">i</span> <span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mh">8191</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mh">1</span><span class="p">)</span>
<span class="k">begin</span>
<span class="p">#</span><span class="mh">1</span>
<span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
<span class="k">end</span>
<span class="k">end</span>

<span class="k">endmodule</span>

<span class="k">module</span> <span class="no">MIPSALU</span> <span class="p">(</span><span class="n">ctl</span><span class="p">,</span> <span class="n">readData1</span><span class="p">,</span> <span class="n">lowerIn</span><span class="p">,</span> <span class="n">shamt</span><span class="p">,</span> <span class="n">ALUresult</span><span class="p">,</span> <span class="n">zero</span><span class="p">);</span>
<span class="c1">// lowerIn is the mux output</span>

<span class="k">input</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">ctl</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">readData1</span><span class="p">,</span><span class="n">lowerIn</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">shamt</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">ALUresult</span><span class="p">;</span>
<span class="k">output</span> <span class="n">zero</span><span class="p">;</span>

<span class="c1">// Zero flag equals 1. if the output equals zero</span>
<span class="k">assign</span> <span class="n">zero</span> <span class="o">=</span> <span class="p">(</span><span class="n">ALUresult</span> <span class="o">==</span> <span class="mh">0</span><span class="p">);</span>

<span class="k">always</span> <span class="p">@</span> <span class="p">(</span><span class="n">ctl</span><span class="p">,</span> <span class="n">readData1</span><span class="p">,</span> <span class="n">lowerIn</span><span class="p">)</span>
 <span class="k">case</span><span class="p">(</span><span class="n">ctl</span><span class="p">)</span>
	<span class="mh">0</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="n">readData1</span> <span class="o">&amp;</span> <span class="n">lowerIn</span><span class="p">;</span>		<span class="c1">//and</span>
	<span class="mh">1</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="n">readData1</span> <span class="o">|</span> <span class="n">lowerIn</span><span class="p">;</span>		<span class="c1">//or (ori)</span>
	<span class="mh">2</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="n">readData1</span> <span class="o">+</span> <span class="n">lowerIn</span><span class="p">;</span>		<span class="c1">//add (lw, sw, addi)</span>
	<span class="mh">6</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="n">readData1</span> <span class="o">-</span> <span class="n">lowerIn</span><span class="p">;</span>		<span class="c1">//sub (beq)</span>
	<span class="mh">7</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="n">readData1</span> <span class="o">&lt;</span> <span class="n">lowerIn</span> <span class="o">?</span> <span class="mh">1</span><span class="o">:</span><span class="mh">0</span><span class="p">;</span>	<span class="c1">//slt</span>
	<span class="c1">//12:ALUresult &lt;= ~ (readData1 | lowerIn);	//nor</span>
	<span class="mh">14</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="n">lowerIn</span> <span class="o">&lt;&lt;</span> <span class="n">shamt</span><span class="p">;</span>		<span class="c1">//sll</span>
	<span class="k">default</span><span class="o">:</span><span class="n">ALUresult</span> <span class="o">&lt;=</span> <span class="mh">0</span><span class="p">;</span>
 <span class="k">endcase</span>
<span class="k">endmodule</span>
<span class="c1">/////////////////////////////////////////////////////////////////////////////////////</span>

<span class="k">module</span> <span class="n">RegFile</span> <span class="p">(</span><span class="n">ReadData1</span><span class="p">,</span><span class="n">ReadData2</span><span class="p">,</span><span class="n">ReadReg1</span><span class="p">,</span><span class="n">ReadReg2</span><span class="p">,</span><span class="n">WriteReg</span><span class="p">,</span><span class="n">WriteData</span><span class="p">,</span><span class="n">RegWrite</span><span class="p">,</span><span class="n">clk</span><span class="p">,</span><span class="n">endofexec</span><span class="p">);</span>
<span class="k">input</span> <span class="n">clk</span><span class="p">;</span>
<span class="k">input</span> <span class="n">RegWrite</span><span class="p">;</span>		<span class="c1">//from control</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">ReadReg1</span><span class="p">;</span>   <span class="c1">//from instruction bus</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">ReadReg2</span><span class="p">;</span>	<span class="c1">//from instruction bus</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">WriteReg</span><span class="p">;</span>	<span class="c1">//from RegDst MUX</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">WriteData</span><span class="p">;</span> <span class="c1">//from instruction bus</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">ReadData1</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">ReadData2</span><span class="p">;</span>
<span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">registers</span> <span class="p">[</span><span class="mh">0</span><span class="o">:</span><span class="mh">31</span><span class="p">];</span>
<span class="k">integer</span> <span class="n">i</span><span class="o">=</span><span class="mh">0</span> <span class="p">;</span>
<span class="k">integer</span> <span class="n">file</span><span class="p">;</span>
<span class="k">input</span> <span class="n">endofexec</span><span class="p">;</span>

<span class="k">initial</span> <span class="k">begin</span>
<span class="n">registers</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span><span class="o">=</span><span class="mh">32</span><span class="mb">&#39;b00000000000000000000000000000000</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">always</span> <span class="p">@(</span><span class="n">ReadReg1</span><span class="p">,</span><span class="n">ReadReg2</span><span class="p">,</span><span class="n">WriteReg</span><span class="p">,</span><span class="n">WriteData</span><span class="p">,</span><span class="n">RegWrite</span><span class="p">)</span>
<span class="k">begin</span>
<span class="c1">//RegFile is supposed to read both regs</span>
 <span class="n">ReadData1</span> <span class="o">&lt;=</span> <span class="n">registers</span><span class="p">[</span><span class="n">ReadReg1</span><span class="p">];</span>
 <span class="n">ReadData2</span> <span class="o">&lt;=</span> <span class="n">registers</span><span class="p">[</span><span class="n">ReadReg2</span><span class="p">];</span>
<span class="k">end</span>
<span class="c1">//write in register</span>
<span class="k">always</span> <span class="p">@(</span><span class="k">posedge</span> <span class="n">clk</span><span class="p">)</span>
<span class="k">begin</span>
<span class="k">if</span><span class="p">(</span><span class="n">RegWrite</span><span class="p">)</span>
	<span class="n">registers</span><span class="p">[</span><span class="n">WriteReg</span><span class="p">]</span><span class="o">=</span><span class="n">WriteData</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">integer</span> <span class="n">lines</span> <span class="o">=</span> <span class="mh">0</span><span class="p">;</span>
<span class="k">always</span> <span class="p">@(</span><span class="k">posedge</span> <span class="n">endofexec</span><span class="p">)</span> <span class="c1">///////////to monitor registers contents in a file///////////////</span>
<span class="k">begin</span>
<span class="k">for</span> <span class="p">(</span><span class="n">lines</span> <span class="o">=</span> <span class="mh">0</span><span class="p">;</span> <span class="n">lines</span><span class="o">&lt;</span><span class="mh">31</span><span class="p">;</span> <span class="n">lines</span><span class="o">=</span><span class="n">lines</span><span class="o">+</span><span class="mh">1</span><span class="p">)</span>
<span class="k">begin</span>
<span class="n">file</span><span class="o">=</span><span class="nb">$fopen</span><span class="p">(</span><span class="s">&quot;C:/localhost/_FromRegFile.txt&quot;</span><span class="p">);</span>
<span class="nb">$fmonitor</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="s">&quot;%b // %d&quot;</span><span class="p">,</span><span class="n">registers</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">i</span> <span class="p">);</span>
<span class="k">end</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mh">31</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mh">1</span><span class="p">)</span>
<span class="k">begin</span>
<span class="p">#</span><span class="mh">1</span>
<span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
<span class="k">end</span>
<span class="k">end</span>

<span class="k">endmodule</span>

<span class="k">module</span> <span class="n">ALUMux</span> <span class="p">(</span><span class="n">MUXout</span><span class="p">,</span> <span class="n">readData2</span><span class="p">,</span> <span class="n">in2</span><span class="p">,</span> <span class="n">ALUSrc</span><span class="p">);</span>

<span class="k">output</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">MUXout</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">readData2</span><span class="p">,</span> <span class="n">in2</span><span class="p">;</span>
<span class="k">input</span> <span class="n">ALUSrc</span><span class="p">;</span>
<span class="k">assign</span>  <span class="n">MUXout</span> <span class="o">=</span> <span class="p">(</span><span class="n">ALUSrc</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span><span class="o">?</span> <span class="nl">readData2:</span>
		 <span class="p">(</span><span class="n">ALUSrc</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">)</span><span class="o">?</span> <span class="nl">in2:</span>
		<span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="k">endmodule</span>


<span class="k">module</span> <span class="n">AluCtl</span><span class="p">(</span><span class="n">funct</span><span class="p">,</span><span class="n">aluop</span><span class="p">,</span><span class="n">aluctl</span><span class="p">,</span><span class="n">jr</span><span class="p">);</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">5</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">funct</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">aluop</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">aluctl</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="n">jr</span><span class="p">;</span>

<span class="k">always</span> <span class="p">@</span> <span class="p">(</span><span class="n">aluop</span><span class="p">,</span><span class="n">funct</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="n">aluop</span> <span class="o">==</span> <span class="mh">3</span><span class="mb">&#39;b000</span><span class="p">)</span>
 <span class="k">begin</span> <span class="n">aluctl</span><span class="o">&lt;=</span><span class="mh">2</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aluop</span><span class="o">==</span><span class="mh">3</span><span class="mb">&#39;b001</span><span class="p">)</span>
 <span class="k">begin</span> <span class="n">aluctl</span><span class="o">&lt;=</span><span class="mh">6</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aluop</span><span class="o">==</span><span class="mh">3</span><span class="mb">&#39;b010</span><span class="p">)</span> <span class="c1">//R type</span>
  <span class="k">begin</span>
     <span class="k">case</span> <span class="p">(</span><span class="n">funct</span><span class="p">)</span>
        <span class="mh">0</span><span class="o">:</span> <span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">14</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span>
	<span class="mh">32</span><span class="o">:</span><span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">2</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span> <span class="c1">//add R type</span>
	<span class="mh">34</span><span class="o">:</span><span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">6</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span> <span class="c1">//sub R type</span>
	<span class="mh">36</span><span class="o">:</span><span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">0</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span> <span class="c1">//and R type</span>
	<span class="mh">37</span><span class="o">:</span><span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span> <span class="c1">//or R type</span>
	<span class="mh">42</span><span class="o">:</span><span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">7</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span> <span class="c1">//slt R type</span>
        <span class="mh">8</span><span class="o">:</span> <span class="n">jr</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="p">;</span> <span class="c1">// jr R type</span>
	<span class="k">default</span><span class="o">:</span><span class="k">begin</span> <span class="n">aluctl</span> <span class="o">&lt;=</span> <span class="mh">0</span><span class="p">;</span> <span class="n">jr</span><span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span>
      <span class="k">endcase</span>
  <span class="k">end</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aluop</span><span class="o">==</span><span class="mh">3</span><span class="mb">&#39;b011</span><span class="p">)</span> <span class="c1">//addi</span>
 <span class="k">begin</span> <span class="n">aluctl</span><span class="o">&lt;=</span><span class="mh">2</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aluop</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b100</span><span class="p">)</span>
  <span class="k">begin</span> <span class="n">aluctl</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span> <span class="c1">//ori</span>
<span class="k">else</span> <span class="k">begin</span> <span class="n">aluctl</span><span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="n">jr</span> <span class="o">&lt;=</span><span class="mh">0</span><span class="p">;</span> <span class="k">end</span>

<span class="k">endmodule</span>


<span class="k">module</span> <span class="n">SignExtend16_32</span><span class="p">(</span><span class="n">Exiting</span><span class="p">,</span><span class="n">Entering</span><span class="p">);</span>

<span class="k">input</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Entering</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">wire</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Exiting</span><span class="p">;</span>

<span class="k">assign</span> <span class="n">Exiting</span> <span class="o">=</span> <span class="p">{{</span><span class="mh">16</span><span class="p">{</span><span class="n">Entering</span><span class="p">[</span><span class="mh">15</span><span class="p">]}}</span> <span class="p">,</span><span class="n">Entering</span><span class="p">};</span>

<span class="k">endmodule</span>



<span class="k">module</span> <span class="n">ShiftLeft32</span><span class="p">(</span><span class="n">Exiting</span><span class="p">,</span><span class="n">Entering</span><span class="p">);</span>

<span class="k">input</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Entering</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">wire</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Exiting</span><span class="p">;</span>

<span class="k">assign</span> <span class="n">Exiting</span> <span class="o">=</span> <span class="p">{</span><span class="n">Entering</span><span class="p">[</span><span class="mh">29</span><span class="o">:</span><span class="mh">0</span><span class="p">],</span><span class="mh">2</span><span class="mb">&#39;b00</span><span class="p">};</span>

<span class="k">endmodule</span>



<span class="k">module</span> <span class="n">ShiftLeft26_28</span><span class="p">(</span><span class="n">Exiting</span><span class="p">,</span><span class="n">Entering</span><span class="p">);</span>

<span class="k">input</span><span class="p">[</span><span class="mh">25</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Entering</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">wire</span><span class="p">[</span><span class="mh">27</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Exiting</span><span class="p">;</span>

<span class="k">assign</span> <span class="n">Exiting</span> <span class="o">=</span> <span class="p">{</span><span class="n">Entering</span><span class="p">,</span><span class="mh">2</span><span class="mb">&#39;b00</span><span class="p">};</span>

<span class="k">endmodule</span>



<span class="k">module</span> <span class="n">Concatenator</span><span class="p">(</span><span class="n">JumpAddress</span><span class="p">,</span><span class="n">Instruction</span><span class="p">,</span><span class="n">PCplus4</span><span class="p">);</span>

<span class="k">input</span><span class="p">[</span><span class="mh">27</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Instruction</span><span class="p">;</span>
<span class="k">input</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">28</span><span class="p">]</span><span class="n">PCplus4</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">wire</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">JumpAddress</span><span class="p">;</span>

<span class="k">assign</span> <span class="n">JumpAddress</span> <span class="o">=</span> <span class="p">{</span><span class="n">PCplus4</span><span class="p">,</span><span class="n">Instruction</span><span class="p">};</span>


<span class="k">endmodule</span>


<span class="k">module</span> <span class="n">Mux5</span><span class="p">(</span><span class="n">Out</span><span class="p">,</span><span class="n">In0</span><span class="p">,</span><span class="n">In1</span><span class="p">,</span><span class="n">Sel</span><span class="p">);</span>

<span class="k">input</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In0</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In1</span><span class="p">;</span>
<span class="k">input</span> <span class="n">Sel</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Out</span><span class="p">;</span>

<span class="k">always</span><span class="p">@(</span><span class="n">Out</span><span class="p">,</span><span class="n">In0</span><span class="p">,</span><span class="n">In1</span><span class="p">,</span><span class="n">Sel</span><span class="p">)</span>
<span class="k">begin</span>
<span class="k">case</span><span class="p">(</span><span class="n">Sel</span><span class="p">)</span>
<span class="mh">1</span><span class="mb">&#39;b0</span><span class="o">:</span> <span class="k">assign</span> <span class="n">Out</span><span class="o">=</span><span class="n">In0</span><span class="p">;</span>
<span class="mh">1</span><span class="mb">&#39;b1</span><span class="o">:</span> <span class="k">assign</span> <span class="n">Out</span><span class="o">=</span><span class="n">In1</span><span class="p">;</span>
<span class="k">default</span><span class="o">:</span> <span class="k">assign</span> <span class="n">Out</span><span class="o">=</span><span class="mh">5</span><span class="p">&#39;</span><span class="n">bxxxxx</span><span class="p">;</span>
<span class="k">endcase</span>
<span class="k">end</span>
<span class="k">endmodule</span>



<span class="k">module</span> <span class="n">Mux32</span><span class="p">(</span><span class="n">Out</span><span class="p">,</span><span class="n">In0</span><span class="p">,</span><span class="n">In1</span><span class="p">,</span><span class="n">Sel</span><span class="p">);</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In0</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In1</span><span class="p">;</span>
<span class="k">input</span> <span class="n">Sel</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Out</span><span class="p">;</span>

<span class="k">always</span><span class="p">@(</span><span class="n">Out</span><span class="p">,</span><span class="n">In0</span><span class="p">,</span><span class="n">In1</span><span class="p">,</span><span class="n">Sel</span><span class="p">)</span>
<span class="k">begin</span>
<span class="k">case</span><span class="p">(</span><span class="n">Sel</span><span class="p">)</span>
<span class="mh">1</span><span class="mb">&#39;b0</span><span class="o">:</span> <span class="k">assign</span> <span class="n">Out</span><span class="o">=</span><span class="n">In0</span><span class="p">;</span>
<span class="mh">1</span><span class="mb">&#39;b1</span><span class="o">:</span> <span class="k">assign</span> <span class="n">Out</span><span class="o">=</span><span class="n">In1</span><span class="p">;</span>
<span class="k">default</span><span class="o">:</span> <span class="k">assign</span> <span class="n">Out</span><span class="o">=</span><span class="mh">32</span><span class="mi">&#39;d0</span><span class="p">;</span>
<span class="k">endcase</span>
<span class="k">end</span>
<span class="k">endmodule</span>

<span class="k">module</span> <span class="n">PCAdder</span><span class="p">(</span><span class="n">Out</span><span class="p">,</span><span class="n">In</span><span class="p">);</span>

<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Out</span><span class="p">;</span>
<span class="k">always</span><span class="p">@(</span><span class="n">Out</span><span class="p">,</span><span class="n">In</span><span class="p">)</span>
<span class="n">Out</span><span class="o">&lt;=</span><span class="n">In</span><span class="o">+</span><span class="mh">3</span><span class="mb">&#39;b100</span><span class="p">;</span>

<span class="k">endmodule</span>
<span class="k">module</span> <span class="n">ShiftAdder</span><span class="p">(</span><span class="n">Out</span><span class="p">,</span><span class="n">In1</span><span class="p">,</span><span class="n">In2</span><span class="p">);</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In1</span><span class="p">;</span>
<span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">In2</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">Out</span><span class="p">;</span>
<span class="k">always</span><span class="p">@(</span><span class="n">Out</span><span class="p">,</span><span class="n">In1</span><span class="p">,</span><span class="n">In2</span><span class="p">)</span>
<span class="n">Out</span><span class="o">&lt;=</span><span class="p">(</span><span class="n">In1</span><span class="o">+</span><span class="n">In2</span><span class="p">);</span>
<span class="k">endmodule</span>


<span class="k">module</span> <span class="n">control</span><span class="p">(</span><span class="n">regDst</span><span class="p">,</span><span class="n">jump</span><span class="p">,</span><span class="n">branch</span><span class="p">,</span><span class="n">memRead</span><span class="p">,</span><span class="n">memToReg</span><span class="p">,</span><span class="n">aluOp</span><span class="p">,</span><span class="n">memWrite</span><span class="p">,</span><span class="n">aluSrc</span><span class="p">,</span><span class="n">regWrite</span><span class="p">,</span><span class="n">opCode</span><span class="p">);</span>

<span class="k">input</span><span class="p">[</span><span class="mh">5</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">opCode</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span> <span class="n">regDst</span><span class="p">,</span><span class="n">jump</span><span class="p">,</span><span class="n">branch</span><span class="p">,</span><span class="n">memRead</span><span class="p">,</span><span class="n">memToReg</span><span class="p">,</span><span class="n">memWrite</span><span class="p">,</span><span class="n">aluSrc</span><span class="p">,</span><span class="n">regWrite</span><span class="p">;</span>
<span class="k">output</span> <span class="kt">reg</span><span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">aluOp</span><span class="p">;</span>

<span class="k">always</span> <span class="p">@(</span><span class="n">opCode</span><span class="p">)</span>

<span class="k">begin</span>


<span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b000000</span><span class="p">)</span> <span class="c1">//R type </span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b010</span><span class="p">;</span>
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="k">end</span>


<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b000100</span><span class="p">)</span> <span class="c1">//beq</span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b001</span><span class="p">;</span> <span class="c1">//subtract </span>
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b001000</span><span class="p">)</span> <span class="c1">//addi </span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b000</span><span class="p">;</span>
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b001101</span><span class="p">)</span> <span class="c1">//ori </span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b100</span><span class="p">;</span> 
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b101011</span><span class="p">)</span> <span class="c1">//sw </span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b000</span><span class="p">;</span> 
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b100011</span><span class="p">)</span> <span class="c1">//lw</span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="mb">&#39;b000</span><span class="p">;</span> 
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b000010</span><span class="p">)</span> <span class="c1">//j</span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="p">&#39;</span><span class="n">bxxx</span><span class="p">;</span> 
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">opCode</span><span class="o">==</span><span class="mh">6</span><span class="mb">&#39;b000011</span><span class="p">)</span> <span class="c1">//jal</span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="p">&#39;</span><span class="n">bxxx</span><span class="p">;</span> 
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
<span class="k">end</span>

<span class="k">else</span>
<span class="k">begin</span>
<span class="n">regDst</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">jump</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">branch</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memRead</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">memToReg</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">aluOp</span><span class="o">&lt;=</span><span class="mh">3</span><span class="p">&#39;</span><span class="n">bxxx</span><span class="p">;</span> 
<span class="n">memWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="n">aluSrc</span><span class="o">&lt;=</span><span class="mh">1</span><span class="p">&#39;</span><span class="n">bx</span><span class="p">;</span>
<span class="n">regWrite</span><span class="o">&lt;=</span><span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
<span class="k">end</span>


<span class="k">end</span>

<span class="k">endmodule</span>



<span class="k">module</span> <span class="n">mips_cpu</span><span class="p">(</span><span class="n">clk</span><span class="p">);</span>
<span class="k">input</span> <span class="n">clk</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="no">RA</span><span class="p">,</span><span class="no">MO2</span><span class="p">,</span><span class="no">MO3</span><span class="p">,</span><span class="no">MO4</span><span class="p">,</span><span class="no">MO5</span><span class="p">,</span><span class="no">MO6</span><span class="p">,</span><span class="no">MO7</span><span class="p">,</span><span class="no">RD1</span><span class="p">,</span><span class="no">RD2</span><span class="p">,</span><span class="n">aluresult</span><span class="p">,</span><span class="n">SignOut</span><span class="p">,</span><span class="n">ReadData</span><span class="p">,</span><span class="n">Add2in2</span><span class="p">,</span><span class="n">Add1out</span><span class="p">,</span><span class="n">Add2out</span><span class="p">,</span><span class="n">fullJA</span><span class="p">,</span><span class="no">IR</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">4</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">rs</span><span class="p">,</span><span class="n">rt</span><span class="p">,</span><span class="n">rd</span><span class="p">,</span><span class="n">shift</span><span class="p">,</span><span class="no">MO1</span><span class="p">,</span><span class="no">MO8</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">5</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">opcode</span><span class="p">,</span><span class="n">func</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">offset</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">25</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="no">JA</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">aluop</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">aluctl</span><span class="p">,</span><span class="n">L4BitsOfNewPC</span><span class="p">;</span>
<span class="kt">wire</span> <span class="n">regdst</span><span class="p">,</span><span class="n">jump</span><span class="p">,</span><span class="n">branch</span><span class="p">,</span><span class="n">memread</span><span class="p">,</span><span class="n">memtoreg</span><span class="p">,</span><span class="n">memwrite</span><span class="p">,</span><span class="n">alusrc</span><span class="p">,</span><span class="n">regwrite</span><span class="p">,</span><span class="n">zero</span><span class="p">,</span><span class="n">jr</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mh">27</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">shiftleft2out</span><span class="p">;</span>
<span class="kt">wire</span> <span class="n">endofexec</span><span class="p">;</span> <span class="c1">////////////////////flag</span>
<span class="no">PC</span> <span class="n">pc1</span><span class="p">(</span><span class="no">RA</span><span class="p">,</span><span class="no">MO6</span><span class="p">,</span><span class="n">clk</span><span class="p">,</span><span class="n">endofexec</span><span class="p">);</span> <span class="c1">//flaggggggg//////////</span>
<span class="n">InstructionMemory</span> <span class="no">IM1</span><span class="p">(</span><span class="no">IR</span><span class="p">,</span><span class="no">RA</span><span class="p">,</span><span class="n">clk</span><span class="p">);</span>
<span class="k">assign</span> <span class="n">rs</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">25</span><span class="o">:</span><span class="mh">21</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">rt</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">20</span><span class="o">:</span><span class="mh">16</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">rd</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">11</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">shift</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">10</span><span class="o">:</span><span class="mh">6</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">opcode</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">26</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">func</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">5</span><span class="o">:</span><span class="mh">0</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">offset</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">];</span>
<span class="k">assign</span> <span class="no">JA</span><span class="o">=</span><span class="no">IR</span><span class="p">[</span><span class="mh">25</span><span class="o">:</span><span class="mh">0</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">L4BitsOfNewPC</span><span class="o">=</span><span class="n">Add1out</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">28</span><span class="p">];</span>
<span class="k">assign</span> <span class="n">fullJA</span><span class="o">=</span><span class="p">{</span><span class="n">L4BitsOfNewPC</span><span class="p">,</span><span class="n">shiftleft2out</span><span class="p">};</span>
<span class="n">RegFile</span> <span class="no">RF1</span><span class="p">(</span><span class="no">RD1</span><span class="p">,</span><span class="no">RD2</span><span class="p">,</span><span class="n">rs</span><span class="p">,</span><span class="n">rt</span><span class="p">,</span><span class="no">MO8</span><span class="p">,</span><span class="no">MO7</span><span class="p">,</span><span class="n">regwrite</span><span class="o">&amp;</span><span class="p">(</span><span class="o">!</span><span class="n">jr</span><span class="p">),</span><span class="n">clk</span><span class="p">,</span><span class="n">endofexec</span><span class="p">);</span> <span class="c1">//flaggggggg/////////</span>
<span class="no">MIPSALU</span> <span class="no">MALU1</span><span class="p">(</span><span class="n">aluctl</span><span class="p">,</span><span class="no">RD1</span><span class="p">,</span><span class="no">MO2</span><span class="p">,</span><span class="n">shift</span><span class="p">,</span><span class="n">aluresult</span><span class="p">,</span><span class="n">zero</span><span class="p">);</span>
<span class="n">AluCtl</span> <span class="n">AluCtl1</span><span class="p">(</span><span class="n">func</span><span class="p">,</span><span class="n">aluop</span><span class="p">,</span><span class="n">aluctl</span><span class="p">,</span><span class="n">jr</span><span class="p">);</span>
<span class="n">SignExtend16_32</span> <span class="no">SE1</span><span class="p">(</span><span class="n">SignOut</span><span class="p">,</span><span class="n">offset</span><span class="p">);</span>
<span class="n">control</span> <span class="n">Ctl1</span><span class="p">(</span><span class="n">regdst</span><span class="p">,</span><span class="n">jump</span><span class="p">,</span><span class="n">branch</span><span class="p">,</span><span class="n">memread</span><span class="p">,</span><span class="n">memtoreg</span><span class="p">,</span><span class="n">aluop</span><span class="p">,</span><span class="n">memwrite</span><span class="p">,</span><span class="n">alusrc</span><span class="p">,</span><span class="n">regwrite</span><span class="p">,</span><span class="n">opcode</span><span class="p">);</span>
<span class="n">DataMemory</span> <span class="no">DM1</span><span class="p">(</span><span class="n">ReadData</span><span class="p">,</span><span class="n">aluresult</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">],</span><span class="no">RD2</span><span class="p">,</span><span class="n">memread</span><span class="p">,</span><span class="n">memwrite</span><span class="p">,</span><span class="n">clk</span><span class="p">,</span><span class="n">endofexec</span><span class="p">);</span> <span class="c1">////////flaggggggg/////////</span>
<span class="n">ShiftLeft32</span> <span class="no">SL1</span><span class="p">(</span><span class="n">Add2in2</span><span class="p">,</span><span class="n">SignOut</span><span class="p">);</span>
<span class="n">ShiftAdder</span> <span class="no">SA1</span><span class="p">(</span><span class="n">Add2out</span><span class="p">,</span><span class="n">Add1out</span><span class="p">,</span><span class="n">Add2in2</span><span class="p">);</span>
<span class="n">PCAdder</span> <span class="no">PCADD1</span><span class="p">(</span><span class="n">Add1out</span><span class="p">,</span><span class="no">RA</span><span class="p">);</span>
<span class="n">ShiftLeft26_28</span> <span class="no">SL2</span><span class="p">(</span><span class="n">shiftleft2out</span><span class="p">,</span><span class="no">JA</span><span class="p">);</span>
<span class="n">Mux5</span> <span class="no">MUX1</span><span class="p">(</span><span class="no">MO1</span><span class="p">,</span><span class="n">rt</span><span class="p">,</span><span class="n">rd</span><span class="p">,</span><span class="n">regdst</span><span class="p">);</span>
<span class="n">Mux5</span> <span class="no">MUX8</span><span class="p">(</span><span class="no">MO8</span><span class="p">,</span><span class="no">MO1</span><span class="p">,</span><span class="mh">5</span><span class="mb">&#39;b11111</span><span class="p">,</span><span class="n">jump</span><span class="p">);</span>
<span class="n">Mux32</span> <span class="no">MUX2</span><span class="p">(</span><span class="no">MO2</span><span class="p">,</span><span class="no">RD2</span><span class="p">,</span><span class="n">SignOut</span><span class="p">,</span><span class="n">alusrc</span><span class="p">);</span>
<span class="n">Mux32</span> <span class="no">MUX3</span><span class="p">(</span><span class="no">MO3</span><span class="p">,</span><span class="n">aluresult</span><span class="p">,</span><span class="n">ReadData</span><span class="p">,</span><span class="n">memtoreg</span><span class="p">);</span>
<span class="n">Mux32</span> <span class="no">MUX4</span><span class="p">(</span><span class="no">MO4</span><span class="p">,</span><span class="n">Add1out</span><span class="p">,</span><span class="n">Add2out</span><span class="p">,(</span><span class="n">zero</span><span class="o">&amp;</span><span class="n">branch</span><span class="p">));</span> 
<span class="n">Mux32</span> <span class="no">MUX5</span><span class="p">(</span><span class="no">MO5</span><span class="p">,</span><span class="no">MO4</span><span class="p">,</span><span class="n">fullJA</span><span class="p">,</span><span class="n">jump</span><span class="p">);</span>
<span class="n">Mux32</span> <span class="no">MUX6</span><span class="p">(</span><span class="no">MO6</span><span class="p">,</span><span class="no">MO5</span><span class="p">,</span><span class="no">RD1</span><span class="p">,</span><span class="n">jr</span><span class="p">);</span>
<span class="n">Mux32</span> <span class="no">MUX7</span><span class="p">(</span><span class="no">MO7</span><span class="p">,</span><span class="no">MO3</span><span class="p">,</span><span class="n">Add1out</span><span class="p">,</span><span class="n">jump</span><span class="p">);</span>
<span class="k">endmodule</span>

<span class="k">module</span> <span class="n">tbmips</span><span class="p">();</span>
<span class="kt">reg</span> <span class="n">clock1</span><span class="p">;</span>
<span class="k">initial</span>
<span class="k">begin</span>
<span class="k">assign</span> <span class="n">clock1</span><span class="o">=</span><span class="mh">0</span><span class="p">;</span>
<span class="k">end</span>
<span class="k">always</span>
<span class="k">begin</span>
<span class="p">#</span><span class="mh">5</span><span class="p">;</span>
<span class="k">assign</span> <span class="n">clock1</span><span class="o">=~</span><span class="n">clock1</span><span class="p">;</span>
<span class="p">#</span><span class="mh">5</span><span class="p">;</span>
<span class="k">end</span>
<span class="n">mips_cpu</span> <span class="no">MIPS</span><span class="p">(</span><span class="n">clock1</span><span class="p">);</span>

<span class="k">endmodule</span>
</pre></div>
</body>
</html>
